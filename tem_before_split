from fastapi import FastAPI, Response, status, HTTPException, Depends
import psycopg2
import time 
from psycopg2.extras import RealDictCursor
from sqlalchemy.orm import Session
from . import models,schemas,utils
from app.database import engine, get_db
from typing import List


models.Base.metadata.create_all(bind=engine)
app = FastAPI()

while True:
    try:
        con =psycopg2.connect(host='localhost',database='fastapi',
                            user='postgres',password='data1base',cursor_factory=RealDictCursor)
        cursor=con.cursor()
        print("database connection was succesfull")
        break
    except Exception as error:
        print("connecting to database failed")
        print("error: ",error)
        time.sleep(2)


@app.get("/")
def root():
    return {"message": "Hello World"}
#
#
#
#               OPERATIONS ON POSTS
#
#
#




@app.get("/posts",response_model=List[schemas.Post])
def get_posts(db:Session=Depends(get_db)):
    posts=db.query(models.Post).all()
    return posts

@app.post("/posts",status_code=status.HTTP_201_CREATED,response_model=schemas.Post)
def create_posts(post:schemas.PostCreate,db:Session=Depends(get_db)):
    # new_post=models.Post(title=post.title,content=post.content,
    #             published=post.published,id=3)
    new_post=models.Post(**post.dict())
    db.add(new_post)
    db.commit()
    db.refresh(new_post)
    return new_post

@app.get("/posts/{id}",response_model=schemas.Post)
def get_post(id:int,db:Session=Depends(get_db)):
    post=db.query(models.Post).filter(models.Post.id == id).first()
    if not post:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f'post with id:{id} was not found')
    return post

@app.delete("/posts/{id}",status_code=status.HTTP_204_NO_CONTENT)
def delete_post(id:int,db:Session=Depends(get_db)):
    post=db.query(models.Post).filter(models.Post.id==id)
    if post.first() == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f'posts with id:{id} does not exits')
    post.delete(synchronize_session=False)
    db.commit()

    return Response(status_code=status.HTTP_204_NO_CONTENT)
    

@app.put("/posts/{id}",response_model=schemas.Post)
def update_post(id:int,post_details:schemas.PostCreate,db:Session=Depends(get_db)):
    post_query=db.query(models.Post).filter(models.Post.id==id)
    post=post_query.first()
    if post == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f'post wiht id:{id} does not exits')
    # post_query.update({'title':'ksdlafo','content':'dkas slkadf  askldfjkl jklk'},synchronize_session=False)
    post_query.update(post_details.dict(),synchronize_session=False)
    db.commit()
    return post_query.first()


#
#
#
#                           OPERATIONS ON USERS
#
#
#

@app.post("/users",status_code=status.HTTP_201_CREATED,response_model=schemas.UserOut)
def create_user(user:schemas.UserCreate,db:Session = Depends(get_db)):
    
    hashed_password=utils.hash(user.password)
    user.password=hashed_password

    new_user=models.User(**user.dict())
    db.add(new_user)
    db.commit()
    db.refresh(new_user)

    return new_user


@app.get("/users/{id}",response_model=schemas.UserOut)
def get_user(id:int,db:Session = Depends(get_db)):
    user =db.query(models.User).filter(models.User.id == id).first()
    if user==None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail=f'User with id {id} not found')
    
    return user
